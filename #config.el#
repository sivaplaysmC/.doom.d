;;; $DOOMDIR/config.el -*- lexical-binding: nil; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "SivaRamaKrishnan"
      user-mail-address "sivaram.asdf@gmail.com")


;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "IosevkaTerm NFM" :size 18 ;; :weight 'semi-light
                           )
     doom-variable-pitch-font (font-spec :family "cascadia mono" :size 22))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-nord)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; (use-package! font-lock+)
;; (add-to-list 'load-path "~/.local/share/icons-in-terminal/")
;; (require 'icons-in-terminal)
;; (load! "icons-in-terminal.el")


(after! which-key
 (setq which-key-idle-delay 0.1)
 )
nn(after! company
  (setq company-idle-delay 0.0
        company-minimum-prefix-length 1
        ))

(after! company-box
  (setq
   company-box-frame-behavior #'point
   company-box-icons-alist 'company-box-icons-images
   company-box-doc-delay 0.2
    ))

(after! rustic
  (setq rustic-lsp-server 'rust-analyzer
        lsp-rust-analyzer-server-display-inlay-hints t)

  (set-popup-rule! "^\\*cargo-run\\*" :side 'right :width .35 :modeline t)

  )

(use-package! evil-goggles
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions

  ;; (evil-goggles-use-diff-faces)
  )

(after! lsp-mode
  (setq lsp-ui-doc-use-childframe t )
  (setq lsp-clangd-binary-path "c:/msys64/mingw64/bin/clangd.exe"
        lsp-signature-render-documentation nil
        lsp-idle-delay 0.1
        )
  (set-popup-rule! "^\\*compilation\\*" :side 'right :width .35 :modeline t)

    )

(after! avy
  (setq
   avy-timeout-seconds 0.3
   avy-single-candidate-jump t
   ;; avy-keys '(?a ?s ?d ?f ?h ?j ?k ?l)

   ;; avy-keys-alist (
   ;;                  'avy-goto-line-below . '(?a ?s ?d ?f ?h ?j ?k ?l)
   ;;                  'avy-goto-line-above . '(?l ?k ?j ?h ?f ?d ?s ?a)
   ;;                  )

   avy-keys '(?a ?s ?d ?f  ?j ?k ?l ?\;)
   ))







(map!
 :desc "Jump to line above"
 "M-;"
 'evil-avy-goto-line)


(defun my-cus-jump()
    (interactive)
    (avy-goto-line-above 1 t)
    )

(evil-define-motion evil-cool-jump (count)
       (format "Evil motion for `%s'." 'cool-jump)
       :type line
       :jump t
       :repeat abort
       (evil-without-repeat
         (evil-enclose-avy-for-motion
           (call-interactively 'my-cus-jump))))


(map!
 :desc "Jump to line below"
 "M-j"
 'evil-avy-goto-line-below  )

(map!
 :desc "Jump to line above"
 "M-k"
 'evil-cool-jump  )


(map!
:desc "Jump to word timer"
"M-;"
'evil-avy-goto-char-timer)


(defhydra hydra/window-nav (:hint nil)
  "
          Split: _v_ert  _s_:horz
         Delete: _c_lose  _o_thers
  Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _u_:undo  _r_:redo
        Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file
          Shift: _M-h_:right          _M-j_:down           _M-k_:up         _M-l_:right
         Resize: _H_  :splitter left  _J_  :splitter down  _K_:splitter up  _L_  :splitter right
           Move: _a_:up  _z_:down  _i_menu
"
  ("z" scroll-up-line)
  ("a" scroll-down-line)
  ("i" idomenu)

  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("u" winner-undo)
  ("r" winner-redo)


  ("M-h" +evil/window-move-left)
  ("M-j" +evil/window-move-down)
  ("M-k" +evil/window-move-up)
  ("M-l" +evil/window-move-right)

  ("p" previous-buffer)
  ("n" next-buffer)
  ("b" switch-to-buffer)
  ("f" find-file)

  ("s" split-window-below)
  ("v" split-window-right)

  ("c" delete-window)
  ("o" delete-other-windows)

  ("H" hydra-move-splitter-left)
  ("J" hydra-move-splitter-down)
  ("K" hydra-move-splitter-up)
  ("L" hydra-move-splitter-right)

  ("q" nil))



(map!
    (
     :leader
     :prefix "w"
     :desc "Hydra resize" :n "SPC" #'hydra/window-nav/body))

(after! company
  (setq
   company-tooltip-maximum-width 80
   company-tooltip-minimum-width 80
   ))



(map! :leader
      (:prefix ("e" . "execute")
        :desc "C/C++"
        "c" #'compileandrun))

(defun compileandrun()
  (interactive)
  (let* ((src (file-name-nondirectory (buffer-file-name)))
         (exe (file-name-sans-extension src)))
    (compile (concat "g++ " src " -o " exe " && .\\" exe " < stdin" ))))


(map! :leader
      (:prefix ("e" . "execute")
        :desc "Rust"
        "r" #'rustandrun))


(defun rustandrun()
  (interactive)
  (let* ((mode 'rustic-cargo-run-mode)
         (src (file-name-nondirectory (buffer-file-name)))
         (exe (file-name-sans-extension src)))
    (compile (concat "rustc " src " -o " exe " && .\\" exe " < stdin" ))))

(after! evil-escape
  (setq evil-escape-unordered-key-sequence t)
  )

(setq-default tab-width 4)


;; (use-package! nerd-icons
;;   :custom
;;   (nerd-icons-font-family "IosevkaTerm NFM")
;;   )



;; (use-package corfu
;;   :config
;;   (defun ++corfu-quit ()
;;     (interactive)
;;     (call-interactively 'corfu-quit)
;;     (evil-normal-state +1))
;;   (setq corfu-cycle t
;;         corfu-auto t
;;         corfu-auto-prefix 1
;;         corfu-auto-delay 0.01
;;         corfu-separator ?\s
;;         corfu-quit-at-boundary 'separator
;;         corfu-quit-no-match t
;;         corfu-preview-current t
;;         corfu-preselect-first t
;;         corfu-on-exact-match nil
;;         corfu-echo-documentation nil
;;         corfu-scroll-margin 10
;;         corfu-popupinfo-delay 0.5
;;         corfu-min-width 80
;;         corfu-count 13
;;         corfu-max-width 120
;;         corfu-popupinfo-max-height 20
;;         corfu-popupinfo-max-width 60)
;;   (map! :map global-map
;;         :nvi "C-SPC" #'completion-at-point)
;;   (map! :map corfu-map

;;         :nvi "C-j" #'corfu-next
;;         :nvi "C-k" #'corfu-previous
;;         :nvi "C-l" #'corfu-insert
;;         :nvi "C-;" #'corfu-insert
;;         :nvi "<tab>" #'corfu-next
;;         :nvi "<S-tab>" #'corfu-previous
;;         :nvi "S-TAB"   #'corfu-previous
;;         :nvi "<escape>" #'++corfu-quit
;;         :nvi "ESC" #'++corfu-quit
;;         :nvi "C-i" #'corfu-popupinfo-toggle
;;         :nvi "C-u" #'corfu-popupinfo-scroll-up
;;         :nvi "C-d" #'corfu-popupinfo-scroll-down)
;;   (global-corfu-mode t)
;;   (corfu-popupinfo-mode t)
;;   (corfu-history-mode t)
;;   (global-company-mode -1)
;;   (add-hook! '(prog-mode-hook
;;                text-mode-hook)
;;     (unless (display-graphic-p)
;;       (corfu-terminal-mode t)
;;       (corfu-doc-terminal-mode t))))

;; (use-package kind-icon
;;   :after corfu
;;   :custom
;;   (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
;;   :config
;;   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

;; See https://github.com/minad/corfu/wiki#basic-example-configuration-with-orderless
;; (use-package orderless
;;   :init
;;   ;; Tune the global completion style settings to your liking!
;;   ;; This affects the minibuffer and non-lsp completion at point.
;;   (setq completion-styles '(orderless partial-completion basic)
;;         completion-category-defaults nil
;;         completion-category-overrides nil))



;; (use-package lsp-mode
;;   :custom
;;   (lsp-completion-provider :none) ;; we use Corfu!
;;   :init
;;   (defun my/lsp-mode-setup-completion ()
;;     (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
;;           '(hotfuzz))) ;; Configure orderless
;;   :hook
;;   (lsp-completion-mode . my/lsp-mode-setup-completion))

;; Add extensions
;; (use-package cape
;;   :init
;;   ;; Add `completion-at-point-functions', used by `completion-at-point'.
;;   (add-to-list 'completion-at-point-functions #'cape-file)
;;   ;;(add-to-list 'completion-at-point-functions #'cape-tex)
;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;;   (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  ;; :config
  ;; (setq cape-dabbrev-min-length 2
  ;;       cape-dabbrev-check-other-buffers 'some))


;; (use-package kind-icon
;;   :after corfu
  ;; :custom
  ;; (kind-icon-use-icons t)
  ;; (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  ;; (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  ;; (kind-icon-blend-frac 0.08)
  ;; ( kind-icon-mapping
  ;;     `((array "a" :icon "code-brackets" :face font-lock-type-face)
  ;;   (boolean "b" :icon "circle-half-full" :face font-lock-builtin-face)
  ;;   (class "c" :icon "file-tree" :face font-lock-type-face)
  ;;   (color "#" :icon "palette" :face success)
  ;;   (command "cm" :icon "code-tags" :face default)
  ;;   (constant "co" :icon "pi" :face font-lock-constant-face)
  ;;   (constructor "cn" :icon "table-column-plus-after" :face font-lock-function-name-face)
  ;;   ;; FIXME: remove this once eglot patch is in Emacs
  ;;   (enummember "em" :icon "order-bool-ascending" :face font-lock-builtin-face)
  ;;   (enum-member "em" :icon "order-bool-ascending" :face font-lock-builtin-face)
  ;;   (enum "e" :icon "equal-box" :face font-lock-builtin-face)
  ;;   (event "ev" :icon "flash-outline" :face font-lock-warning-face)
  ;;   (field "fd" :icon "hexagon-multiple" :face font-lock-variable-name-face)
  ;;   (file "f" :icon "file-document-outline" :face font-lock-string-face)
  ;;   (folder "d" :icon "folder" :face font-lock-doc-face)
  ;;   (interface "if" :icon "pyramid" :face font-lock-type-face)
  ;;   (keyword "kw" :icon "key-variant" :face font-lock-keyword-face)
  ;;   (macro "mc" :icon "lambda" :face font-lock-keyword-face)
  ;;   (magic "ma" :icon "auto-fix" :face font-lock-builtin-face)
  ;;   (method "m" :icon "cube-scan" :face nerd-icons-purple)
  ;;   (function "f" :icon "cube-outline" :face nerd-icons-purple)
  ;;   (module "{" :icon "package-variant-closed" :face font-lock-preprocessor-face)
  ;;   (numeric "nu" :icon "numeric" :face nerd-icons-orange )
  ;;   (operator "op" :icon "plus-minus" :face font-lock-comment-delimiter-face)
  ;;   (param "pa" :icon "cog" :face default)
  ;;   (property "pr" :icon "wrench" :face font-lock-variable-name-face)
  ;;   (reference "rf" :icon "library" :face font-lock-variable-name-face)
  ;;   (snippet "S" :icon "border-bottom-variant" :face font-lock-string-face)
  ;;   (string "s" :icon "alphabetical-variant" :face font-lock-string-face)
  ;;   (struct "%" :icon "format-list-text" :face font-lock-variable-name-face)
  ;;   (text "tx" :icon "alphabet-latin" :face font-lock-doc-face)



  ;;   ;; FIXME: remove this once eglot patch is in Emacs
  ;;   (typeparameter "tp" :icon "axis-arrow" :face font-lock-type-face)
  ;;   (type-parameter "tp" :icon "axis-arrow" :face font-lock-type-face)
  ;;   (unit "u" :icon "ruler-square" :face font-lock-constant-face)
  ;;   (value "v" :icon "plus-circle-outline" :face font-lock-builtin-face)
  ;;   (variable "va" :icon "variable" :face font-lock-variable-name-face)
  ;;   (t "." :icon "format-text" :face font-lock-warning-face)))


  ;; NOTE 2022-02-05: `kind-icon' depends `svg-lib' which creates a cache
  ;; directory that defaults to the `user-emacs-directory'. Here, I change that
  ;; directory to a location appropriate to `no-littering' conventions, a
  ;; package which moves directories of other packages to sane locations.
  ;; (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/")) ; Change cache dir
  ;; :config
  ;; (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

  ;; Add hook to reset cache so the icon colors match my theme
  ;; NOTE 2022-02-05: This is a hook which resets the cache whenever I switch
  ;; the theme using my custom defined command for switching themes. If I don't
  ;; do this, then the backgound color will remain the same, meaning it will not
  ;; match the background color corresponding to the current theme. Important
  ;; since I have a light theme and dark theme I switch between. This has no
  ;; function unless you use something similar
  ;; (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache))))

;; (use-package! hotfuzz)

;; (use-package lsp-mode
;;   :custom
;;   (lsp-completion-provider :none) ;; we use Corfu!
;;   :init
;;   (defun my/lsp-mode-setup-completion ()
;;     (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
;;           '(hotfuzz))) ;; Configure flex
;;   :hook
;;   (lsp-completion-mode . my/lsp-mode-setup-completion))

;; (setq completion-category-overrides
;;       '((buffer (styles hotfuzz)))

;;       )
;;  (defun my/lsp-mode-setup-completion ()
;;     (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
;;           '(hotfuzz
;;             ))) ;; Configure flex

;; (add-hook!
;; 'lsp-completion-mode   'my/lsp-mode-setup-completion
;;  )


;; (use-package! sideline
;;   :hook (flycheck-mode . sideline-mode)
;;   :init
;;   (setq sideline-backends-right '(sideline-flycheck)))

;; (use-package! sideline-flycheck :hook (flycheck-mode . sideline-flycheck-setup))


;; (use-package! sideline)
;; (use-package! sideline-flycheck)

;; (add-hook! 'flycheck-mode 'sideline-mode)
;; (add-hook! 'flycheck-mode 'sideline-flycheck-setup)
;; (after! sideline-mode
;; (setq sideline-backends-right '(sideline-flycheck))
;;   )

;; (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)


;; (add-hook!
;; 'flycheck-mode   'sideline-flycheck-setup
;;  )
(setq default-process-coding-system '(utf-8 . utf-8))
